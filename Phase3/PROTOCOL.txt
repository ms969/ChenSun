Kevin Chen - kfc35
MJ Sun - ms969

Goal of Protocol:
	Authentication of server and client:
		At the end of the protocol, the client knows that the server 
		it is communicating to has the private key that corresponds 
		to the public key that the client is holding. Server also
		gets a weak authentication of the client because the 
		client knows how to answer the challenge sent to him.
		There is no guarantee that the client is a genuine client.
		

Authentication Protocol:
	1) Ensure that the ClientGUI is talking to the 
	genuine server.
	2) Ensure that the server is talking to a genuine
	ClientGUI.
	3) Ensure that ClientGUI and server communications
	are confidential.
	4) Ensure that the user operating the ClientGUI is
	a genuine user of the system.
	5) Ensure that the server's long term storage data
	is confidential.
	
Set-Up Assumptions
	1) The server has a public key known to all ClientGUI's
	and a private key that only its operator knows.
	2) The operator has a shared key only the operator knows,
	which is used to encrypt/decrypt the database
	(Enrollment Protocol)
	3) Presidents/The-Most-High of ACapella groups have contacted
	the server operator to set up their own accounts as well
	as their own ACapella groups.
	
Authenticating the Client-Server Connection
Client					Server
{r_1, k_cs}K_s		->
					Decrypt msg using k_s provided by operator
			<-		{r_1 + 1, r_2}k_cs
{(r_2) * 2}k_cs		->

Using the Public Key of the server, the client sends a shared session key
with a challenge.
The server responds back with the original challenge + 1, and sends
a challenge back to ensure that the client is following protocol
The client returns back the new challenge * 2.



Nonce Sizes: 64 bits. Not many people will be using the system at a time.
Our estimated population 20 * 10 = 200 people. If everyone logs in everyday,
it would be 73,000 hypothetical sessions (73,000 * 2 nonces).
Key Size: For Blowfish: 128 bits, the default. 128 Bits is
supposedly sufficient for good security. (http://www.openssl.org/docs/crypto/blowfish.html)

Crypto Package
NonClosingCipherOutputStream
	Sometimes, closing a CipherOutputStream is desired, but 
the underlying socket stream should not be closed. This FilterOutputStream
is an intermediate to restrict the lower output streams from being closed.

PublicKeyCryptoClient
	Implements the Client side of the authentication protocol involving
it and the server. This method is "clientSideAuth". Also contains a method
for retrieving the server's Public Key: "serverPublicKeyRSA"

PublicKeyCryptoServer
	Implements the Server side of the authentication protocol involving
it and the server. This method is "serverSideAuth". Also contains a method
for retrieving the server's Public Key: "serverPublicKeyRSA", the server's
Private Key (given the secret): "serverPrivateKeyRSA", and a method for
checking whether the two key's form a key pair (authenticatePrivateKeyRSA)

SharedKeyCryptoComm
	To provide confidential communication between the client and the server,
the send and receive methods use a cipheroutputstream and cipherinputstream 
respectively to encode and decode String messages. It utilizes the shared
session key between the two. There are various helpful methods that
generate random IV's, as well as reading IV's from the stream for deciphering.
It also contains the method "createCipher", which wraps the creation of
a Cipher in a try catch block to suppress warnings of "illegal lag", etc.
	

	